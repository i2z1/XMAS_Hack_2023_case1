[
  {
    "objectID": "clickhouse.html",
    "href": "clickhouse.html",
    "title": "Clickhouse магия",
    "section": "",
    "text": "А вот код!\nlibrary(RClickhouse)\n\ncon &lt;- DBI::dbConnect(RClickhouse::clickhouse(), host=\"localhost\",\n                      port = 9000,\n                      dbname = \"WIFI\",\n                      user = \"default\",\n                      password = \"useruser\", compression = \"lz4\")"
  },
  {
    "objectID": "clickhouse.html#подключение",
    "href": "clickhouse.html#подключение",
    "title": "Clickhouse магия",
    "section": "",
    "text": "А вот код!\nlibrary(RClickhouse)\n\ncon &lt;- DBI::dbConnect(RClickhouse::clickhouse(), host=\"localhost\",\n                      port = 9000,\n                      dbname = \"WIFI\",\n                      user = \"default\",\n                      password = \"useruser\", compression = \"lz4\")"
  },
  {
    "objectID": "clickhouse.html#данные",
    "href": "clickhouse.html#данные",
    "title": "Clickhouse магия",
    "section": "Данные",
    "text": "Данные\nУ нас много строк даже после очистки:\n\n\nА вот код!\nDBI::dbGetQuery(con, \"SELECT count(*)\n                             FROM mainlog\")\n\n\n    count()\n1 299965940\n\n\nПример данных\n\n\nА вот код!\nres &lt;- DBI::dbGetQuery(con, \"SELECT (*)\n                             FROM mainlog limit 10\")\nknitr::kable(res)\n\n\n\n\n\n\n\n\n\n\n\n\n\nguid\ntm\nrouter_mac\nuser_mac\nsignal\nrouter_id\n\n\n\n\nb7e87fd6-49e9-41a7-9645-4ae25f120138\n2023-01-01 03:00:00.000 +0300\n48:8F:5A:AE:A1:D9\n68:D7:9A:A2:74:60\n-73.0\n0648078a-9d45-4577-af14-12b49e8f017b\n\n\n014f1da1-e200-4fc5-869a-a695836a2fe5\n2023-01-01 03:00:00.000 +0300\n48:8F:5A:AE:A1:D9\n6C:5A:B0:A1:DB:8E\n-68.0\n0648078a-9d45-4577-af14-12b49e8f017b\n\n\n9d5dfa10-f9fd-4dae-ac86-c935381a02b4\n2023-01-01 03:00:00.000 +0300\nB8:69:F4:6B:FD:E9\n60:A4:B7:4D:89:37\n-75.0\n07190dec-be71-44a2-8d64-c24fb51ebc7b\n\n\n14ed8300-18f3-42e6-9a92-e458edc2fac9\n2023-01-01 03:00:00.000 +0300\nCC:2D:E0:82:B9:07\n80:2A:A8:76:08:1C\n-74.0\n8a823f01-771f-420e-8971-928cba314a24\n\n\n35a91e47-d8a2-4642-8002-a5298702f12e\n2023-01-01 03:00:00.000 +0300\nCC:2D:E0:82:B9:40\n38:17:66:10:29:3C\n-73.0\n3d9490f4-fb08-4c4c-80ec-ca744a6d9ab4\n\n\n63eb92c4-3f13-45bc-b055-421dd6787ce6\n2023-01-01 03:00:00.000 +0300\nCC:2D:E0:82:B9:40\nD0:37:45:C1:E1:1E\n-66.0\n3d9490f4-fb08-4c4c-80ec-ca744a6d9ab4\n\n\n63d60bf2-6cef-4d32-92ef-8dfba4c63a82\n2023-01-01 03:00:01.000 +0300\n48:8F:5A:AC:81:1D\n68:D7:9A:BE:E3:20\n-57.0\n8a734674-e451-4fe1-8b50-3b3b46e334a1\n\n\n1928f1cd-5aef-427e-ac19-5295441827bb\n2023-01-01 03:00:01.000 +0300\n48:8F:5A:AE:A1:D9\n00:1E:43:90:F8:65\n-68.0\n0648078a-9d45-4577-af14-12b49e8f017b\n\n\nda4c5fcb-3006-48ae-931c-28c911bd9179\n2023-01-01 03:00:01.000 +0300\nB8:69:F4:6B:FD:E9\n8E:41:A1:E8:8C:B6\n-74.0\n07190dec-be71-44a2-8d64-c24fb51ebc7b\n\n\n511284de-fa1b-42e6-b47f-2ee43079d2cc\n2023-01-01 03:00:02.000 +0300\n48:8F:5A:AE:A1:D9\n5A:1A:86:06:3C:F7\n-75.0\n0648078a-9d45-4577-af14-12b49e8f017b\n\n\n\n\n\n\nОбщий heatmap\n\n\nА вот код!\nlibrary(dplyr)\n\nhmap_tbl &lt;- tbl(con, \"mainlog\") %&gt;% \n  group_by(router_id) %&gt;% \n  summarise(n=n()) %&gt;% \n  collect()\n\nreadr::write_csv2(hmap_tbl, \"data/all_routers_popularity_annual.csv\")\n\n\nСтроим heatmap\n\n\nДобавим данных из роутеров\n\n\nА вот код!\nrouters_dist &lt;- readr::read_csv(\"https://storage.yandexcloud.net/roadgraph/marshruts_lengts.csv\")\n\n\nrdst2upl &lt;- routers_dist %&gt;% \n  select(from_guid, to_guid, length)\n\n#DBI::dbWriteTable(con, \"rdst\", rdst2upl)\n\ntbl(con, \"rdst\") %&gt;% \n  head %&gt;% \n  collect()\n\n\n# A tibble: 6 × 3\n  from_guid                            to_guid                            length\n  &lt;chr&gt;                                &lt;chr&gt;                               &lt;dbl&gt;\n1 0648078a-9d45-4577-af14-12b49e8f017b 6422a0a5-2c2d-4610-bebc-91722ea37…  4994.\n2 0648078a-9d45-4577-af14-12b49e8f017b b17aefd3-8431-4054-a0b5-b0a26eeb9…  3354.\n3 0648078a-9d45-4577-af14-12b49e8f017b 92c1cc9e-cfa4-4ef0-91f0-c0a158f54…  5807.\n4 0648078a-9d45-4577-af14-12b49e8f017b f0058c02-034f-429a-b932-8638089d8…  3551.\n5 0648078a-9d45-4577-af14-12b49e8f017b 37cea6a6-eaaa-4e12-9b4b-b444163a2…  1666.\n6 0648078a-9d45-4577-af14-12b49e8f017b 07190dec-be71-44a2-8d64-c24fb51eb…   959.\n\n\n\n\nРеализация LAG/LEAD в Clickhouse – пока отсутствует\nhttps://www.programmersought.com/article/532510185734/\n– поэтому пока …"
  },
  {
    "objectID": "clickhouse.html#proof-of-concept-решение",
    "href": "clickhouse.html#proof-of-concept-решение",
    "title": "Clickhouse магия",
    "section": "Proof-of-Concept решение",
    "text": "Proof-of-Concept решение\n\nИдея\n\n\nА вот код!\ndf &lt;- readr::read_csv2(\"https://storage.yandexcloud.net/roadgraph/wifi_logs_2023_01_01_202312081852.csv\")\n\n\n\n\nА вот код!\ndf %&gt;% \n  mutate(tm = as.POSIXct(tm)) %&gt;% \n  select(tm, router_mac, user_mac) %&gt;% \n  arrange(user_mac) %&gt;% \n  head(10) %&gt;% \n  knitr::kable()\n\n\n\n\n\ntm\nrouter_mac\nuser_mac\n\n\n\n\n2023-01-01 19:27:19\nB8:69:F4:6B:FD:B6\n00:00:00:10:00:00\n\n\n2023-01-01 16:45:03\nCC:2D:E0:F3:8C:6E\n00:00:00:16:FA:9E\n\n\n2023-01-01 16:46:19\n48:8F:5A:AE:A1:D9\n00:00:00:16:FA:9E\n\n\n2023-01-01 19:48:00\n48:8F:5A:AE:A1:D9\n00:00:00:16:FA:9E\n\n\n2023-01-01 19:47:56\nCC:2D:E0:F3:8C:6E\n00:00:00:16:FA:9E\n\n\n2023-01-01 17:44:50\n48:8F:5A:AE:A1:27\n00:00:D4:02:1C:F8\n\n\n2023-01-01 07:36:52\n48:8F:5A:AE:A1:D9\n00:02:42:FB:17:E0\n\n\n2023-01-01 07:36:48\n48:8F:5A:AE:A1:27\n00:02:42:FB:17:E0\n\n\n2023-01-01 07:37:13\n48:8F:5A:AE:A1:27\n00:02:42:FB:17:E0\n\n\n2023-01-01 07:37:18\n48:8F:5A:AE:A1:D9\n00:02:42:FB:17:E0\n\n\n\n\n\nЕсли посмотреть на отсортированные данные – то можно наблдать как юзеры отмечаются на разных роутерахв разное время. Можно замерить лаг (разницу между прошлым временем и текущим), а также подсчитать расстояние между БС, на которой была предыдущая отметка.\nОчевидно, что\n\\[V = S/t\\]\nВыполняем для всех на 01-01-2023\n\n\nА вот код!\nmonitoring_df &lt;- df %&gt;% \n  mutate(tm = as.POSIXct(tm)) %&gt;% \n  group_by(user_mac, .drop = FALSE) %&gt;% \n  arrange(tm) %&gt;% \n  summarise(tm, lagtime = lag(tm), lagpoint = lag(router_id), router_id) %&gt;% \n  filter(lagpoint!=router_id)\n\nmonitoring_df_w_dist &lt;- left_join(monitoring_df, rdst2upl, by = c(\"lagpoint\" = \"from_guid\", \"router_id\" = \"to_guid\")) %&gt;% \n  mutate(time_delta = (tm - lagtime) %&gt;% as.numeric()) %&gt;% \n  mutate(velocity = length / time_delta)\n\n\nПолучили скорость в районе роутера\nТеперь сгруппируем по роутерам и определеим средняя скорость в разные интервалы времени\n\n\nУтро\n\n\nА вот код!\nutro &lt;- \"2023-01-01 11:00:00\"\n\nlibrary(lubridate)\n\nutro_df &lt;- monitoring_df_w_dist %&gt;% \n  filter(ymd_hms(tm) &lt; ymd_hms(utro)) %&gt;% \n  group_by(router_id) %&gt;% \n  summarise(vel = median(velocity))\n\nwrite.csv2(utro_df, file = \"data/utro_2023_01_01.csv\")\n\n\n\n\nДень\n\n\nА вот код!\nutro &lt;- \"2023-01-01 11:00:00\"\nve4er &lt;- \"2023-01-01 17:00:00\"\n\nlibrary(lubridate)\n\nden_df &lt;- monitoring_df_w_dist %&gt;% \n  filter(ymd_hms(tm) &gt; ymd_hms(utro) & ymd_hms(tm) &lt; ymd_hms(ve4er))%&gt;% \n  group_by(router_id) %&gt;% \n  summarise(vel = median(velocity))\n\nwrite.csv2(den_df, file = \"data/den_2023_01_01.csv\")\n\n\n\n\nВечер\n\n\nА вот код!\nve4er &lt;- \"2023-01-01 17:00:00\"\n\nlibrary(lubridate)\n\nve4er_df &lt;- monitoring_df_w_dist %&gt;% \n  filter(ymd_hms(tm) &gt; ymd_hms(ve4er))%&gt;% \n  group_by(router_id) %&gt;% \n  summarise(vel = median(velocity))\n\nwrite.csv2(ve4er_df, file = \"data/ve4er_2023_01_01.csv\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "https://github.com/i2z1\nhttps://github.com/TheRunuwayDinosaur\nhttps://github.com/limeparrot\nhttps://github.com/moltensock\nhttps://github.com/Sanches23rx"
  },
  {
    "objectID": "routers.html",
    "href": "routers.html",
    "title": "Роутеры",
    "section": "",
    "text": "Размещение роутеров"
  },
  {
    "objectID": "routers.html#вычисление-расстояний-между-роутерами",
    "href": "routers.html#вычисление-расстояний-между-роутерами",
    "title": "Роутеры",
    "section": "Вычисление расстояний между роутерами",
    "text": "Вычисление расстояний между роутерами\nimport osmnx as ox\nimport networkx as nx\nimport csv\n\npoints = [[37.618886,54.204617,\"0648078a-9d45-4577-af14-12b49e8f017b\"],\n          [37.5826629190378,54.1688958982062,\"6422a0a5-2c2d-4610-bebc-91722ea37827\"],\n          [37.5931054621157,54.1854456631672,\"b17aefd3-8431-4054-a0b5-b0a26eeb9f14\"],\n          [37.5726628595483,54.1691301221863,\"92c1cc9e-cfa4-4ef0-91f0-c0a158f547e7\"],\n          [37.6230252453024,54.2347433816421,\"f0058c02-034f-429a-b932-8638089d8718\"],\n          [37.616479,54.191903,\"37cea6a6-eaaa-4e12-9b4b-b444163a2cc8\"],\n          [37.622509,54.2128,\"07190dec-be71-44a2-8d64-c24fb51ebc7b\"],\n          [37.611688,54.195984,\"8a823f01-771f-420e-8971-928cba314a24\"],\n          [37.625018,54.218076,\"8a734674-e451-4fe1-8b50-3b3b46e334a1\"],\n          [37.622566,54.189654,\"cdcab165-cc3a-460f-ae99-024216190ab1\"],\n          [37.604794,54.18133,\"64642101-76de-4d38-9a09-c595b0c310d5\"],\n          [37.614096,54.193204,\"b42c687a-0dc2-49d1-9d6e-0d9e514d29bf\"],\n          [37.6286864157148,54.2276569624141,\"4cf88651-6c76-46a4-80d0-5dea3e5bcce2\"],\n          [37.6245072514748,54.2333462654037,\"7a04763d-e3ba-4e45-b1df-1d322a449030\"],\n          [37.67935,54.219052,\"4deed344-b28a-4ecb-818e-252e4fc70a97\"],\n          [37.6182365086987,54.2413214831852,\"86b9b151-ae96-45b1-97b2-20558726245c\"],\n          [37.627888,54.191341,\"3d9490f4-fb08-4c4c-80ec-ca744a6d9ab4\"],\n          [37.6119371506259,54.2491761841739,\"be579fae-23ff-48ed-a400-0691c6075faa\"],\n          [37.625265,54.190082,\"7080fd33-a510-4b1a-af7e-99fb5abc29d7\"],\n          [37.620844,54.2101,\"5481c7a7-fd20-4b84-afb9-d7d2afd599e6\"],\n          [37.5855121948686,54.1714546891764,\"6bd0d45b-c204-4d89-87eb-ff08c5e906ec\"],\n          [37.5799264475165,54.1666267574838,\"7bc69835-bbd1-4fc3-b742-6101e3e1e32f\"],\n          [37.5754334510529,54.1718766491252,\"1aa15d03-6814-40c2-9b57-34a55ae7951b\"],\n          [37.619014,54.191034,\"090a6502-bfc4-4d39-bc94-b0519fee04d6\"],\n          [37.5946593824111,54.1646166190679,\"7d460e9e-4351-4a42-b7e9-40addd0b01c5\"],\n          [37.5974766750285,54.1839287967087,\"37ab13f5-8c0b-4ece-b4fb-e1cf070bab95\"],\n          [37.619966,54.208412,\"c2fa0fb8-03c9-4eb2-900f-f0d140128a5f\"],\n          [37.614644,54.200674,\"0b91ef8c-3b4f-4a39-b3a3-9683c6fd7832\"],\n          [37.619182,54.205679,\"a8c8525e-cfcf-416f-88dd-bf1efc79df00\"]\n          ]\n\nwith open(\"marshruts_lengts.csv\",\"w\") as file:\n    writer = csv.writer(file)\n    writer.writerow((\"from\",\"from_guid\",\"to\",\"to_guid\",\"length\"))\n\n\nmode = 'drive'\noptimizer = 'length'\ncenter = (54.203918, 37.618391)  # меняем местами\ngraph = ox.graph_from_point(center, 10000, dist_type='network', simplify=True)\n\nfor i in range(0,len(points)):\n    for j in range(0,len(points)):\n        if i == j:\n            continue\n\n        orig_node = ox.distance.nearest_nodes(graph,points[i][0],points[i][1])\n\n        dest_node = ox.distance.nearest_nodes(graph, points[j][0],points[j][1])\n\n        shortest_route = nx.shortest_path(graph, orig_node,dest_node,\n                                          weight=optimizer)\n        length = nx.shortest_path_length(G=graph, source=orig_node, target=dest_node, weight='length')\n        newRow = [str(points[i][0]) + ' ' + str(points[i][1]),points[i][2],str(points[j][0]) + ' ' + str(points[j][1]),points[j][2],length]\n        with open(\"marshruts_lengts.csv\",\"a\") as file:\n            writer = csv.writer(file)\n            writer.writerow(newRow)"
  },
  {
    "objectID": "routers.html#результат",
    "href": "routers.html#результат",
    "title": "Роутеры",
    "section": "Результат",
    "text": "Результат\n\n\n\n\n\n\nДатасет\n\n\n\nhttps://storage.yandexcloud.net/roadgraph/marshruts_lengts.csv"
  },
  {
    "objectID": "recomendations.html",
    "href": "recomendations.html",
    "title": "Рекомендации",
    "section": "",
    "text": "А вот код!\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(leaflet)\n\nrouters &lt;- readr::read_csv2(\"data/wifi_routers.csv\")\n\nrouters &lt;- routers %&gt;% \n  tidyr::separate_wider_delim(geom, delim = \" \", names=c(\"point\", \"lon\", \"lat\")) %&gt;% \n  mutate(lon = stringr::str_replace(lon, \"\\\\(\",\"\") %&gt;% as.numeric()) %&gt;% \n  mutate(lat = stringr::str_replace(lat, \"\\\\)\",\"\") %&gt;% as.numeric())\n\nunique_statistics &lt;- readr::read_csv2(\"data/all_routers_popularity_annual.csv\")\nunique_statistics &lt;- data.frame(unique_statistics)\n\nall_stats &lt;- merge(x = unique_statistics, y = routers, by.x = \"router_id\", by.y = \"guid\", all.y = TRUE)\nall_stats &lt;- all_stats %&gt;% arrange(desc(n))\n\nall_stats$stats &lt;- cut(all_stats$n, c(0, 1000000, 5000000, 20000000, 2000000000), include.lowest = T, labels = c('&lt;1m users', '1m-5m users', '5m-20m users', '&gt;20m users'))\n\nbeatCol &lt;- colorFactor(palette = 'RdYlGn', all_stats$stats)\n\nmapa &lt;- leaflet() %&gt;%\n  addTiles() %&gt;% \n  addProviderTiles(providers$OpenStreetMap, group = 'Open SM')  %&gt;%\n  setView(lng = 37.56, lat = 54.2, zoom = 12) %&gt;%\n  addCircleMarkers(data = all_stats, lat = all_stats$lat, lng = all_stats$lon, color = ~beatCol(all_stats$stats), radius=14, stroke = FALSE, fillOpacity = 0.6, popup = all_stats$router_id) %&gt;% addLegend('bottomright', pal = beatCol, values = all_stats$stats,\n            title = 'Распределение проблемных зон',\n            opacity = 1)\nmapa"
  },
  {
    "objectID": "recomendations.html#распределение-проблемных-зон",
    "href": "recomendations.html#распределение-проблемных-зон",
    "title": "Рекомендации",
    "section": "",
    "text": "А вот код!\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(leaflet)\n\nrouters &lt;- readr::read_csv2(\"data/wifi_routers.csv\")\n\nrouters &lt;- routers %&gt;% \n  tidyr::separate_wider_delim(geom, delim = \" \", names=c(\"point\", \"lon\", \"lat\")) %&gt;% \n  mutate(lon = stringr::str_replace(lon, \"\\\\(\",\"\") %&gt;% as.numeric()) %&gt;% \n  mutate(lat = stringr::str_replace(lat, \"\\\\)\",\"\") %&gt;% as.numeric())\n\nunique_statistics &lt;- readr::read_csv2(\"data/all_routers_popularity_annual.csv\")\nunique_statistics &lt;- data.frame(unique_statistics)\n\nall_stats &lt;- merge(x = unique_statistics, y = routers, by.x = \"router_id\", by.y = \"guid\", all.y = TRUE)\nall_stats &lt;- all_stats %&gt;% arrange(desc(n))\n\nall_stats$stats &lt;- cut(all_stats$n, c(0, 1000000, 5000000, 20000000, 2000000000), include.lowest = T, labels = c('&lt;1m users', '1m-5m users', '5m-20m users', '&gt;20m users'))\n\nbeatCol &lt;- colorFactor(palette = 'RdYlGn', all_stats$stats)\n\nmapa &lt;- leaflet() %&gt;%\n  addTiles() %&gt;% \n  addProviderTiles(providers$OpenStreetMap, group = 'Open SM')  %&gt;%\n  setView(lng = 37.56, lat = 54.2, zoom = 12) %&gt;%\n  addCircleMarkers(data = all_stats, lat = all_stats$lat, lng = all_stats$lon, color = ~beatCol(all_stats$stats), radius=14, stroke = FALSE, fillOpacity = 0.6, popup = all_stats$router_id) %&gt;% addLegend('bottomright', pal = beatCol, values = all_stats$stats,\n            title = 'Распределение проблемных зон',\n            opacity = 1)\nmapa"
  },
  {
    "objectID": "recomendations.html#распределение-наиболее-используемых-роутеров",
    "href": "recomendations.html#распределение-наиболее-используемых-роутеров",
    "title": "Рекомендации",
    "section": "Распределение наиболее используемых роутеров",
    "text": "Распределение наиболее используемых роутеров\n\n\nА вот код!\nrouters &lt;- readr::read_csv2(\"data/wifi_routers.csv\")\n\nrouters &lt;- routers %&gt;% \n  tidyr::separate_wider_delim(geom, delim = \" \", names=c(\"point\", \"lon\", \"lat\")) %&gt;% \n  mutate(lon = stringr::str_replace(lon, \"\\\\(\",\"\") %&gt;% as.numeric()) %&gt;% \n  mutate(lat = stringr::str_replace(lat, \"\\\\)\",\"\") %&gt;% as.numeric())\n\nunique_statistics &lt;- readr::read_csv2(\"data/all_routers_popularity_annual.csv\")\nunique_statistics &lt;- data.frame(unique_statistics)\n\nall_stats &lt;- merge(x = unique_statistics, y = routers, by.x = \"router_id\", by.y = \"guid\", all.y = TRUE)\nall_stats &lt;- all_stats %&gt;% arrange(desc(n))\n\nall_stats$stats &lt;- cut(1/all_stats$n, c(1/1000000000, 1/1000000, 1/5000000, 1/20000000, 1/500), include.lowest = T, labels = c('&gt;20m users', '5m-20m users', '1m-5m users', '&lt;1m users'))\n\nbeatCol &lt;- colorFactor(palette = 'RdYlGn', all_stats$stats)\n\nmapa &lt;- leaflet() %&gt;%\n  addTiles() %&gt;% \n  addProviderTiles(providers$OpenStreetMap, group = 'Open SM')  %&gt;%\n  setView(lng = 37.56, lat = 54.2, zoom = 12) %&gt;%\n  addCircleMarkers(data = all_stats, lat = all_stats$lat, lng = all_stats$lon, color = ~beatCol(all_stats$stats), radius=14, stroke = FALSE, fillOpacity = 0.6, popup = all_stats$router_id) %&gt;% addLegend('bottomright', pal = beatCol, values = all_stats$stats,\n            title = 'Распределение популярных роутеров',\n            opacity = 1)\nmapa"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSFans_XMASHack",
    "section": "",
    "text": "Сайт проекта команды DSFans\n\n\nhttps://github.com/i2z1\nhttps://github.com/TheRunuwayDinosaur\nhttps://github.com/limeparrot\nhttps://github.com/moltensock\nhttps://github.com/Sanches23rx"
  },
  {
    "objectID": "data_preparation.html",
    "href": "data_preparation.html",
    "title": "Подготовка данных",
    "section": "",
    "text": "А вот код!\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(httr2)"
  },
  {
    "objectID": "data_preparation.html#подготовка-рабочего-окружения",
    "href": "data_preparation.html#подготовка-рабочего-окружения",
    "title": "Подготовка данных",
    "section": "",
    "text": "А вот код!\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(httr2)"
  },
  {
    "objectID": "data_preparation.html#импорт",
    "href": "data_preparation.html#импорт",
    "title": "Подготовка данных",
    "section": "Импорт",
    "text": "Импорт\n\n\nА вот код!\n#|eval: false \n\nrd_network &lt;- readr::read_csv2(\"https://storage.yandexcloud.net/roadgraph/road_network.csv\")\nglimpse(rd_network)\n\n\nRows: 349,753\nColumns: 6\n$ geom           &lt;chr&gt; \"LINESTRING (37.081866 54.504539,37.081866 54.50443,37.…\n$ from_vertex_id &lt;dbl&gt; 3652, 58925, 58925, 248317, 24102, 52561, 96152, 169402…\n$ to_vertex_id   &lt;dbl&gt; 3650, 69671, 69510, 248315, 24100, 52559, 96154, 169400…\n$ weight         &lt;dbl&gt; 1.784126e+16, 4.689159e+16, 6.011167e+16, 1.951298e+16,…\n$ was_one_way    &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ group_id       &lt;dbl&gt; 42993, NA, NA, NA, 41418, NA, NA, NA, NA, NA, NA, NA, N…\n\n\nРоутеры\n\n\nА вот код!\nrouters &lt;- readr::read_csv2(\"data/wifi_routers.csv\")\n\nrouters &lt;- routers %&gt;% \n  tidyr::separate_wider_delim(geom, delim = \" \", names=c(\"point\", \"lat\", \"lon\")) %&gt;% \n  mutate(lat = stringr::str_replace(lat, \"\\\\(\",\"\") %&gt;% as.numeric()) %&gt;% \n  mutate(lon = stringr::str_replace(lon, \"\\\\)\",\"\") %&gt;% as.numeric())\n\nrouters %&gt;% select(guid, lat, lon)\n\n\n# A tibble: 29 × 3\n   guid                                   lat   lon\n   &lt;chr&gt;                                &lt;dbl&gt; &lt;dbl&gt;\n 1 0648078a-9d45-4577-af14-12b49e8f017b  37.6  54.2\n 2 6422a0a5-2c2d-4610-bebc-91722ea37827  37.6  54.2\n 3 b17aefd3-8431-4054-a0b5-b0a26eeb9f14  37.6  54.2\n 4 92c1cc9e-cfa4-4ef0-91f0-c0a158f547e7  37.6  54.2\n 5 f0058c02-034f-429a-b932-8638089d8718  37.6  54.2\n 6 37cea6a6-eaaa-4e12-9b4b-b444163a2cc8  37.6  54.2\n 7 07190dec-be71-44a2-8d64-c24fb51ebc7b  37.6  54.2\n 8 8a823f01-771f-420e-8971-928cba314a24  37.6  54.2\n 9 8a734674-e451-4fe1-8b50-3b3b46e334a1  37.6  54.2\n10 cdcab165-cc3a-460f-ae99-024216190ab1  37.6  54.2\n# ℹ 19 more rows\n\n\n\nРасстояния\n\n\nА вот код!\n#|eval: false\nlibrary(httr2)\n\nhttr2::request(\"https://graphhopper.com/api/1/route\") %&gt;% \n  req_method(\"POST\")"
  }
]